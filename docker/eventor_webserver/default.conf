server {
  listen       80;
  server_name  webio.tracker;
  root /usr/share/nginx/html;
  index /index.html;

  lua_transform_underscores_in_response_headers on;
  lua_need_request_body on;
  set $lua_request_content "{}";
  set $lua_request_headers "";
  set $lua_response_headers "";
  set $lua_request_id "-";
  set $visitor_identity "-";

  log_by_lua_block {
      ngx.var.lua_request_content = ngx.encode_base64(ngx.req.get_body_data())
      ngx.var.lua_request_headers = ngx.encode_base64(ngx.req.raw_header())
      ngx.var.lua_request_id = string.lower(uuid.getUUID())
      ngx.var.visitor_identity = ""

      for response_header_name, response_header_value in pairs(ngx.resp.get_headers()) do
        ngx.var.lua_response_headers = ngx.var.lua_response_headers .. response_header_name .. ":" .. response_header_value .. "\r\n"
      end

      ngx.var.lua_response_headers = ngx.encode_base64(ngx.var.lua_response_headers)
  }

  location = / {
    default_type 'application/json';
    content_by_lua_block {

      ngx.req.read_body()

      local cookie, err = resty_cookie:new()
      local expires = 3600 * 24 * 365 * 10

      if cookie then
        local visitor_identity, err = cookie:get("visitor_identity")
        if err then
          visitor_identity = string.lower(uuid.getUUID())
        end

        ngx.var.visitor_identity = visitor_identity

        cookie:set({
          key =  "visitor_identity",
          value = ngx.var.visitor_identity,
          path = "/",
          domain = "."..ngx.var.host,
          secure = false,
          httponly = false,
          expires = ngx.cookie_time(ngx.time() + expires),
          max_age = expires
        })
      end

      if ngx.headers_sent == false then
        ngx.send_headers()
      end

      ngx.say("{}")
      ngx.eof()
    }
  }

  error_page  405     =200 $uri;
  error_page   500 502 503 504  /index.html;

  error_log /var/log/nginx/error.log info;
  access_log /var/log/nginx/access.log custom_log;
}